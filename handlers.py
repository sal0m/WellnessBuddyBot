from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import UserProfile
from utils import calculate_water_goal, calculate_calorie_goal, get_weather, get_food_info

router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WellnessBuddyBot! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")

# –ö–æ–º–∞–Ω–¥–∞ /set_profile
@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(UserProfile.weight)

@router.message(UserProfile.weight)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=int(message.text))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(UserProfile.height)

@router.message(UserProfile.height)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=int(message.text))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(UserProfile.age)

@router.message(UserProfile.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(UserProfile.activity)

@router.message(UserProfile.activity)
async def process_activity(message: Message, state: FSMContext):
    await state.update_data(activity=int(message.text))
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(UserProfile.city)

@router.message(UserProfile.city)
async def process_city(message: Message, state: FSMContext):
    data = await state.get_data()
    weight, height, age, activity = data["weight"], data["height"], data["age"], data["activity"]
    city = message.text

    weather = await get_weather(city)
    water_goal = calculate_water_goal(weight, activity, weather)
    calorie_goal = calculate_calorie_goal(weight, height, age, activity)

    users[message.from_user.id] = {
        "weight": weight,
        "height": height,
        "age": age,
        "activity": activity,
        "city": city,
        "water_goal": water_goal,
        "calorie_goal": calorie_goal,
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0
    }

    await message.reply(
        f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! üåü\n"
        f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª.\n"
        f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª."
    )
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /log_water
@router.message(Command("log_water"))
async def log_water(message: Message):
    try:
        amount = int(message.get_args())
        user = users.get(message.from_user.id, {})
        if not user:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
            return
        user["logged_water"] += amount
        await message.reply(
            f"üíß –í—ã –≤—ã–ø–∏–ª–∏ {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {user['water_goal'] - user['logged_water']} –º–ª."
        )
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö.")

# –ö–æ–º–∞–Ω–¥–∞ /log_food
@router.message(Command("log_food"))
async def log_food(message: Message):
    product_name = message.get_args()
    if not product_name:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    food_info = get_food_info(product_name)
    if not food_info:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")
        return

    await message.reply(
        f"üç¥ {food_info['name']} ‚Äî {food_info['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n"
        "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
    )

# –ö–æ–º–∞–Ω–¥–∞ /check_progress
@router.message(Command("check_progress"))
async def check_progress(message: Message):
    user = users.get(message.from_user.id, {})
    if not user:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    await message.reply(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª.\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)