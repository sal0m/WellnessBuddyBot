from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from states import UserProfile, FoodLogState, WaterLogState, ActivityLogState
from utils import calculate_water_goal, calculate_calorie_goal, get_weather, get_food_info

router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –°–ª–æ–≤–∞—Ä—å –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞ 30 –º–∏–Ω—É—Ç)
WORKOUT_CALORIES = {
    "–ë–µ–≥": 300,
    "–ü–ª–∞–≤–∞–Ω–∏–µ": 250,
    "–•–æ–¥—å–±–∞": 150,
    "–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": 200,
    "–ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": 250,
    "–°–Ω–æ—É–±–æ—Ä–¥": 250,
    "–õ—ã–∂–∏": 300,
    "–ö–æ–Ω—å–∫–∏": 200,
    "–†–æ–ª–∏–∫–∏": 200,
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /set_profile
def create_profile_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/set_profile")],
        ],
        resize_keyboard=True,
        is_persistent=True
    )

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
def create_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç¥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏")],
            [KeyboardButton(text="üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É")],
            [KeyboardButton(text="üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å")],
            [KeyboardButton(text="üèãÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        ],
        resize_keyboard=True,
        is_persistent=True
    )

def get_user_profile(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω."""
    return users.get(user_id)

async def ensure_profile(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –¥–∞."""
    if not get_user_profile(message.from_user.id):
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.",
            reply_markup=create_profile_keyboard()
        )
        return False
    return True

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    user = get_user_profile(message.from_user.id)
    if user:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_menu_keyboard())
    else:
        await message.reply(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.",
            reply_markup=create_profile_keyboard()
        )

# –ö–æ–º–∞–Ω–¥–∞ /set_profile
@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(UserProfile.weight)

@router.message(UserProfile.weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
        if weight <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        await state.update_data(weight=weight)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(UserProfile.height)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ (–≤ –∫–≥).")

@router.message(UserProfile.height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        if height <= 0:
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        await state.update_data(height=height)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(UserProfile.age)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (–≤ —Å–º).")

@router.message(UserProfile.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age <= 0:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        await state.update_data(age=age)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        await state.set_state(UserProfile.activity)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.")

@router.message(UserProfile.activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text)
        if activity < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        await state.update_data(activity=activity)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)")
        await state.set_state(UserProfile.city)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö).")

@router.message(UserProfile.city)
async def process_city(message: Message, state: FSMContext):
    data = await state.get_data()
    weight, height, age, activity = data["weight"], data["height"], data["age"], data["activity"]
    city = message.text

    weather = await get_weather(city)
    water_goal = calculate_water_goal(weight, activity, weather)
    calorie_goal = calculate_calorie_goal(weight, height, age, activity)

    users[message.from_user.id] = {
        "weight": weight,
        "height": height,
        "age": age,
        "activity": activity,
        "city": city,
        "water_goal": water_goal,
        "calorie_goal": calorie_goal,
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0
    }

    await message.reply(
        f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –£–¥–∞—á–∏ –Ω–∞ –ø—É—Ç–∏ –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏! üåü\n"
        f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª.\n"
        f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu_keyboard()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É
@router.message(F.text == "üíß –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—É")
async def add_water(message: Message, state: FSMContext):
    if not await ensure_profile(message):
        return
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (–≤ –º–ª):")
    await state.set_state(WaterLogState.amount)

@router.message(WaterLogState.amount)
async def process_water(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        user_id = message.from_user.id
        users[user_id]["logged_water"] += amount
        await message.reply(
            f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {amount} –º–ª –≤–æ–¥—ã. –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {users[user_id]['logged_water']} / {users[user_id]['water_goal']} –º–ª.",
            reply_markup=create_main_menu_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –º–ª).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏
@router.message(F.text == "üç¥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏")
async def add_food(message: Message, state: FSMContext):
    if not await ensure_profile(message):
        return
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –±–ª—é–¥–∞:")
    await state.set_state(FoodLogState.waiting_for_food_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏
@router.message(F.text == "üç¥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏")
async def add_food(message: Message, state: FSMContext):
    if not await ensure_profile(message):
        return
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –±–ª—é–¥–∞:")
    await state.set_state(FoodLogState.waiting_for_food_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(FoodLogState.waiting_for_food_name)
async def process_food_name(message: Message, state: FSMContext):
    food_name = message.text

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ (–±–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏)
    food_info = get_food_info(food_name)

    if not food_info:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(food_name=food_info["name"], calories_per_100g=food_info["calories"])
    await message.reply(
        f"üç¥ {food_info['name']} —Å–æ–¥–µ—Ä–∂–∏—Ç {food_info['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n"
        "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏? –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ."
    )
    await state.set_state(FoodLogState.waiting_for_food_weight)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –í–≤–æ–¥ –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(FoodLogState.waiting_for_food_weight)
async def process_food_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
        if weight <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        food_name = data["food_name"]
        calories_per_100g = data["calories_per_100g"]

        # –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
        total_calories = (weight * calories_per_100g) / 100

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        user = users.get(message.from_user.id, {})

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user["logged_calories"] += total_calories
        await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.1f} –∫–∫–∞–ª ({weight} –≥ {food_name}).")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
@router.message(F.text == "üèãÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def add_activity(message: Message, state: FSMContext):
    if not await ensure_profile(message):
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=activity, callback_data=activity)] for activity in WORKOUT_CALORIES.keys()
        ]
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(ActivityLogState.activity_type)

@router.callback_query(ActivityLogState.activity_type)
async def process_activity_selection(callback: CallbackQuery, state: FSMContext):
    activity = callback.data
    if activity not in WORKOUT_CALORIES:
        await callback.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(activity_type=activity)
    await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
    await state.set_state(ActivityLogState.duration)

@router.message(ActivityLogState.duration)
async def process_activity_duration(message: Message, state: FSMContext):
    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        data = await state.get_data()
        activity_type = data["activity_type"]
        calories_burned = WORKOUT_CALORIES[activity_type] * (duration / 30)

        user_id = message.from_user.id
        users[user_id]["burned_calories"] += calories_burned

        await message.reply(
            f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: {activity_type} –Ω–∞ {duration} –º–∏–Ω—É—Ç. –°–æ–∂–∂–µ–Ω–æ {calories_burned:.0f} –∫–∫–∞–ª. "
            f"–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: —Å–æ–∂–∂–µ–Ω–æ {users[user_id]['burned_calories']:.0f} –∫–∫–∞–ª.",
            reply_markup=create_main_menu_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
@router.message(F.text == "üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def view_progress(message: Message):
    if not await ensure_profile(message):
        return

    user_id = message.from_user.id
    user = users[user_id]
    progress_message = (
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"üíß –í–æ–¥–∞: {user['logged_water']} / {user['water_goal']} –º–ª\n"
        f"üç¥ –ö–∞–ª–æ—Ä–∏–∏: {user['logged_calories']} / {user['calorie_goal']} –∫–∫–∞–ª\n"
        f"üèãÔ∏è –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {user['burned_calories']:.0f} –∫–∫–∞–ª"
    )
    await message.reply(progress_message, reply_markup=create_main_menu_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)